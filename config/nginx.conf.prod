load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

    access_log /var/log/nginx/access.log main;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    client_max_body_size 25m;

    server {
        listen 50050;
        server_name localhost;

        error_page 502 @wait_for_upstream;

        location / {
            proxy_pass http://127.0.0.1:8081$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host "localhost";
            proxy_set_header X-Real-IP "";
            proxy_set_header X-Forwarded-For "";
            proxy_set_header X-Forwarded-Proto "";
            proxy_hide_header Via;
            proxy_hide_header Server;

            proxy_next_upstream off;
            proxy_intercept_errors on;
            proxy_buffering off;
        }

        location @wait_for_upstream {
            content_by_lua_block {
                local function is_healthy()
                    local res = ngx.location.capture("/health_check", {
                        method = ngx.HTTP_GET,
                        args = "target=127.0.0.1:8081"
                    })
                    return res.status and res.status < 400
                end

                ngx.sleep(10)

                if not is_healthy() then
                    ngx.status = 200
                    ngx.header["Content-Type"] = "text/html"
                    ngx.say("<p>Updating...</p><script>setTimeout(() => { window.location.reload() }, 10_000)</script>")
                    ngx.exit(ngx.HTTP_OK)
                else
                    ngx.exec("@wait_for_upstream_proxy")
                end
            }
        }

        location @wait_for_upstream_proxy {
            proxy_pass http://127.0.0.1:8081$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host "localhost";
            proxy_set_header X-Real-IP "";
            proxy_set_header X-Forwarded-For "";
            proxy_set_header X-Forwarded-Proto "";
            proxy_hide_header Via;
            proxy_hide_header Server;

            proxy_next_upstream off;
            proxy_intercept_errors on;
            error_page 502 503 504 = @wait_for_upstream;
            proxy_buffering off;
        }
    }
}
